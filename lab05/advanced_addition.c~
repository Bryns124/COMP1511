#include <stdio.h>
#include <assert.h>

#define MAX_SIZE 101

int sum(int num_lines, int num_digits, int array[MAX_SIZE][MAX_SIZE]);

// DO NOT CHANGE THIS MAIN FUNCTION
int main(void) {
    int array[MAX_SIZE][MAX_SIZE] = {0};

    // Get the array size.
    int num_digits, num_rows;
    printf("Enter the number of rows (excluding the last): ");
    scanf("%d", &num_rows);
    assert(num_rows > 0 && num_rows < 100);

    printf("Enter the number of digits on each row: ");
    scanf("%d", &num_digits);
    assert(num_digits > 0 && num_digits < MAX_SIZE);

    // Scan in values for the array.
    printf("Enter 2D array values:\n");
    int x = 0;
    while (x < num_rows) {
        int y = 0;
        while (y < num_digits) {
            assert(scanf("%d", &array[x][y]) == 1);
            if (array[x][y] < 0 || array[x][y] > 9) {
                printf("You entered a value not between 0 and 9.\n");
                return 1;
            }
            y++;
        }
        x++;
    }

    int carry = sum(num_rows, num_digits, array);

    int y = 0;
    while (j < num_digits) {
        printf("%d ", array[num_rows][y]);
        y++;
    }
    printf("\n");
    x++;

    if (carry > 0) {
        printf("Carried over: %d\n", carry);
    }

    return 0;
}

// Put the sum of the lines in the array into the last line
// accounting for carrying. Return anything you did not carry.
//
// NOTE: num_lines is the number of lines you are adding together. The
// array has an extra line for you to put the result.
int sum(int num_lines, int num_digits, int array[MAX_SIZE][MAX_SIZE]) { 
    
    int a = 0;
    int b = 0;
    int temp = 0;
    int loop_sum = 0;
    int result_sum = 0;
    while (b <= num_digits) {
        loop_sum = 0;
        a = 0;
        while (a < num_lines) { 
            loop_sum = loop_sum + array[a][(num_digits) - b] + result_sum;
            result_sum = 0;
            a++;
        }  
        if (loop_sum > 9) {
            temp = loop_sum % 10;
            result_sum = (loop_sum-temp)/10;
            loop_sum = loop_sum % 10;
        }
        array[a][num_digits - b] = loop_sum;   
        b++;
    }
    return result_sum;
}



